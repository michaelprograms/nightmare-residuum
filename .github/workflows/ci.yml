# This is a basic workflow that is manually triggered

name: CI on ubuntu

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'docs/**'

jobs:
  build-and-test:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Install Packages
      run: |
        sudo apt update
        sudo apt install -y build-essential clang-6.0 autoconf automake bison expect libevent-dev libmysqlclient-dev libpcre3-dev libpq-dev libsqlite3-dev libssl-dev libtool libz-dev telnet libgtest-dev libjemalloc-dev
        sudo apt remove libgcc-11-dev gcc-11
      timeout-minutes: 5
        
    - name: Cache Driver
      uses: actions/cache@v2
      id: cache
      with:
        path: build
        key: ${{ hashFiles('**/driver/src') }}
    - name: Build Driver
      if: steps.cache.outputs.cache-hit != 'true'
      run: ./build.sh
      shell: bash
      timeout-minutes: 5
      
    - name: Run Tests
      run: ./run-tests.sh
      shell: bash
      timeout-minutes: 1

    - name: Get Catch Log
      uses: pCYSl5EDgo/cat@master
      id: catch_logs
      with:
        path: lib/log/catch
    - name: View Catch Log
      run: echo $TEXT
      env:
        TEXT: ${{ steps.catch_logs.outputs.text }}
        
    - name: Get Runtime Log
      uses: pCYSl5EDgo/cat@master
      id: runtime_logs
      with:
        path: lib/log/runtime
    - name: View Runtime Log
      run: echo $TEXT
      env:
        TEXT: ${{ steps.runtime_logs.outputs.text }}
